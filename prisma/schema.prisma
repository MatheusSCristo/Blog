// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
}

model Post {
  id        String     @id @default(uuid())
  title     String
  content   String?
  published Boolean    @default(false)
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String
  likes     Like[]
  comments  Comments[]
  category  Category[]
  createAt  DateTime   @default(now()) @map(name: "created_at")
}

model Category {
  id       String @id @default(uuid())
  Post     Post   @relation(fields: [postId], references: [id])
  postId   String
  category String
}

model Comments {
  id        String   @id @default(uuid())
  Post      Post     @relation(fields: [postId], references: [id])
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  postId    String
  content   String
  createdAt DateTime @default(now()) @map(name: "created_at")
}

model Like {
  Post   Post   @relation(fields: [postId], references: [id])
  postId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@id([postId, userId])
}

model User {
  id          String     @id @default(uuid()) @map("_id")
  username    String     @unique
  email       String     @unique
  password    String
  createdAt   DateTime   @default(now()) @map(name: "created_at")
  updatedAt   DateTime   @updatedAt @map(name: "updated_at")
  posts       Post[]
  followedBy  Follows[]  @relation("following")
  following   Follows[]  @relation("followedBy")
  bio         String?
  displayName String?
  profileImg  String?
  bgImg       String?
  messageTo   Messages[] @relation("messageTo")
  messageFrom Messages[] @relation("messageFrom")
  comments    Comments[]
  Like        Like[]
  Account     Account[]

  @@map(name: "user")
}

model Follows {
  followedBy   User   @relation("followedBy", fields: [followedById], references: [id])
  followedById String
  following    User   @relation("following", fields: [followingId], references: [id])
  followingId  String

  @@id([followingId, followedById])
}

model Messages {
  messageTo     User     @relation("messageTo", fields: [messageToId], references: [id])
  messageToId   String
  messageFrom   User     @relation("messageFrom", fields: [messageFromId], references: [id])
  messageFromId String
  createdAt     DateTime @default(now()) @map(name: "created_at")
  content       String
  read          Boolean  @default(false)
  id            String   @id @default(uuid())
}

model Account {
  id                String  @id @default(uuid()) @map("_id")
  type              String
  provider          String
  providerAccountId String
  token_type        String?
  refresh_token     String?
  access_token      String?
  id_token          String?
  scope             String?
  session_state     String?
  expires_at        Int?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
  @@map("account")
}
